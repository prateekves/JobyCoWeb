using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

#region Required NameSpaces for Download

using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html;
using iTextSharp.text.html.simpleparser;

#endregion

#region Required Global NameSpaces

using DataAccessLayer;
using EntityLayer;
using SecurityLayer;
using JobyCoWeb.Models;
using System.Data;
using System.Web.Services;
using System.Web.Script.Serialization;

#endregion

namespace JobyCoWeb.Ghana
{
    public partial class ViewDriverJobForDelivery : System.Web.UI.Page
    {
        #region Required Global Classes

        static clsOperation objOP = new clsOperation();
        static clsDB objDB = new clsDB();
        static clsCryptography objCG = new clsCryptography();
        static ControlModels objCM = new ControlModels();

        #endregion
        BOLogin ObjLogin = new BOLogin();
        protected void Page_Load(object sender, EventArgs e)
        {
            objCM.ResetMessageBar(lblErrMsg);

            if (!IsPostBack)
            {
                #region Menu Items & Page Controls

                objCM.PopulateAccessibleMenuItemsOnHiddenField(hfMenusAccessible);

                string sPagePath = objCM.GetCurrentPageName();
                int iMenuId = Convert.ToInt32(objOP.RetrieveField2FromAlikeField1("Menu_ID", "MenuDetails", "PagePath", sPagePath));
                objCM.PopulatePageControlsOnHiddenField(hfControlsAccessible, iMenuId);

                #endregion

                #region Checking SessionID


                ObjLogin = (BOLogin)Session["Login"];

                if (ObjLogin == null)
                {
                    Response.Redirect("/Login.aspx");
                }
                else
                {
                    string sessionid = ObjLogin.SESSIONID;
                    if (sessionid == "")
                    {
                        Response.Redirect("/Login.aspx");
                    }
                    else
                    {
                        Master.LoggedInUser = objOP.GetUserName(ObjLogin.EMAILID.ToString());
                    }
                }

                #endregion

                //DataTable dtDrivers = objOP.GetDriversForDelivery("Ghana");
                //objCM.FillDropDown(ddlDrivers, "Name", dtDrivers);
                DataTable dtDrivers = objOP.GetDriversForDelivery("Ghana");
                objCM.FillDropDownByFields(ddlDrivers, "Name", dtDrivers);
            }
        }

        [WebMethod]
        public static string ReAssignBookingToDriver(
           string AssignId,
           string DriverId,
           string BookingId,
           string Wage
            )
        {
            EntityLayer.AssignBookingToDriver objAssign = new EntityLayer.AssignBookingToDriver();

            AssignId = objOP.GetAutoGeneratedValue("AssignId", "AssignDriverBooking", "ASGN", 9);
            objAssign.AssignId = AssignId;
            objAssign.DriverId = DriverId;
            objAssign.BookingId = BookingId;

            objAssign.Wage = Convert.ToDecimal(Wage);

            objAssign.OptionType = "Ghana";

            objDB.ReAssignBookingToDriver(objAssign);

            return "Success";
        }
        [WebMethod]
        public static string UnAssignBookingToDriver(string BookingId)
        {
            EntityLayer.AssignBookingToDriver objAssign = new EntityLayer.AssignBookingToDriver();
            objAssign.BookingId = BookingId;
            objAssign.OptionType = "Ghana";
            objDB.UnAssignBookingToDriver(objAssign);

            return "Success";
        }


        [WebMethod]
        public static string GetAllAssignedBookings(string DriverId)
        {
            DataTable dtAssignedBooking = objDB.GetAllAssignedBookings(DriverId, "Ghana");

            List<EntityLayer.AllAssignedBookings> lstAssignedBooking = new List<EntityLayer.AllAssignedBookings>();

            foreach (DataRow drBooking in dtAssignedBooking.Rows)
            {
                EntityLayer.AllAssignedBookings objAssignedBooking = new EntityLayer.AllAssignedBookings();

                objAssignedBooking.DriverName = drBooking["DriverName"].ToString();
                objAssignedBooking.BookingId = drBooking["BookingId"].ToString();
                objAssignedBooking.FromDate = Convert.ToDateTime(drBooking["FromDate"].ToString());
                objAssignedBooking.ToDate = Convert.ToDateTime(drBooking["ToDate"].ToString());
                objAssignedBooking.Address = drBooking["Address"].ToString();
                objAssignedBooking.PostCode = drBooking["PostCode"].ToString();
                objAssignedBooking.Mobile = drBooking["Mobile"].ToString();
                objAssignedBooking.Wage = Convert.ToDecimal(drBooking["Wage"].ToString());

                lstAssignedBooking.Add(objAssignedBooking);
            }

            var js = new JavaScriptSerializer();
            return js.Serialize(lstAssignedBooking);
        }

        [WebMethod]
        public static string GetPickupDetailsForPrint(string BookingId)
        {
            DataTable dtPrintDriverJob = objDB.GetPickupDetailsForPrint(BookingId);

            List<EntityLayer.PrintDriverJob> lstPrintDriverJob = new List<EntityLayer.PrintDriverJob>();
            int iCount = dtPrintDriverJob.Rows.Count;
            foreach (DataRow drPrintDriverJob in dtPrintDriverJob.Rows)
            {
                EntityLayer.PrintDriverJob objPrintDriverJob = new EntityLayer.PrintDriverJob();

                objPrintDriverJob.BookingId = drPrintDriverJob["BookingId"].ToString();
                objPrintDriverJob.PickupDate = drPrintDriverJob["PickupDate"].ToString();
                objPrintDriverJob.PickupName = drPrintDriverJob["PickupName"].ToString();
                objPrintDriverJob.PickupPhone = drPrintDriverJob["PickupPhone"].ToString();
                objPrintDriverJob.PickupAddress = drPrintDriverJob["PickupAddress"].ToString();
                objPrintDriverJob.PickupZip = drPrintDriverJob["PickupZip"].ToString();
                objPrintDriverJob.PickupItem = drPrintDriverJob["PickupItem"].ToString();
                objPrintDriverJob.ItemCount = iCount;

                objPrintDriverJob.DeliveryName = drPrintDriverJob["DeliveryName"].ToString();
                objPrintDriverJob.DeliveryPhone = drPrintDriverJob["DeliveryPhone"].ToString();
                objPrintDriverJob.DeliveryAddress = drPrintDriverJob["DeliveryAddress"].ToString();
                objPrintDriverJob.DeliveryZip = drPrintDriverJob["DeliveryZip"].ToString();

                lstPrintDriverJob.Add(objPrintDriverJob);
            }

            var js = new JavaScriptSerializer();
            return js.Serialize(lstPrintDriverJob);
        }

        [WebMethod]
        public static string GetAllAssignedDriverJobs(string FromDate, string ToDate)
        {
            System.Globalization.CultureInfo uk = new System.Globalization.CultureInfo("en-GB");
            DataTable dtAssignedBooking = objDB.GetAllAssignedDriverJobs(
                Convert.ToDateTime(FromDate, uk), Convert.ToDateTime(ToDate, uk), "Ghana");

            List<AllAssignedBookings> lstAssignedBooking = new List<EntityLayer.AllAssignedBookings>();

            foreach (DataRow drBooking in dtAssignedBooking.Rows)
            {
                EntityLayer.AllAssignedBookings objAssignedBooking = new EntityLayer.AllAssignedBookings();

                objAssignedBooking.DriverName = drBooking["DriverName"].ToString();
                objAssignedBooking.BookingId = drBooking["BookingId"].ToString();
                objAssignedBooking.FromDate = Convert.ToDateTime(drBooking["FromDate"].ToString());
                objAssignedBooking.ToDate = Convert.ToDateTime(drBooking["ToDate"].ToString());
                objAssignedBooking.Address = drBooking["Address"].ToString();
                objAssignedBooking.PostCode = drBooking["PostCode"].ToString();
                objAssignedBooking.Mobile = drBooking["Mobile"].ToString();
                objAssignedBooking.Wage = Convert.ToDecimal(drBooking["Wage"].ToString());

                lstAssignedBooking.Add(objAssignedBooking);
            }

            var js = new JavaScriptSerializer();
            return js.Serialize(lstAssignedBooking);
        }
        protected void btnExportPdf_Click(object sender, EventArgs e)
        {
            if (ObjLogin.EMAILID == null)
            {
                ObjLogin = (BOLogin)Session["Login"];
            }
            
            DataTable dtDriverJobs = objDB.GetAllDrivers(ObjLogin.EMAILID.ToString());
            objCM.DownloadPDF(dtDriverJobs, "DriverJob");
        }
        protected void btnExportExcel_Click(object sender, EventArgs e)
        {
            if (ObjLogin.EMAILID == null)
            {
                ObjLogin = (BOLogin)Session["Login"];
            }

            DataTable dtDriverJobs = objDB.GetAllDrivers(ObjLogin.EMAILID.ToString());
            objCM.DownloadExcel(dtDriverJobs, "DriverJob");
        }

        [WebMethod]
        public static string GetDriverIdFromDriverName(string DriverName)
        {
            return objOP.GetDriverIdFromFullName(DriverName);
        }

        [WebMethod]
        public static string GetDriverEmailIdFromDriverId(string DriverId)
        {
            return objOP.RetrieveField2FromField1("EmailID", "Drivers", "DriverId", DriverId);
        }

        [WebMethod]
        public static string GetDriverDOBFromDriverId(string DriverId)
        {
            return objOP.RetrieveField2FromField1("DOB", "Drivers", "DriverId", DriverId);
        }

        [WebMethod]
        public static string GetDriverAddressFromDriverId(string DriverId)
        {
            return objOP.RetrieveField2FromField1("Address", "Drivers", "DriverId", DriverId);
        }

        [WebMethod]
        public static string GetDriverPostCodeFromDriverId(string DriverId)
        {
            return objOP.RetrieveField2FromField1("PostCode", "Drivers", "DriverId", DriverId);
        }

        [WebMethod]
        public static string GetDriverMobileFromDriverId(string DriverId)
        {
            return objOP.RetrieveField2FromField1("Mobile", "Drivers", "DriverId", DriverId);
        }

        [WebMethod]
        public static string GetDriverLandlineFromDriverId(string DriverId)
        {
            return objOP.RetrieveField2FromField1("Landline", "Drivers", "DriverId", DriverId);
        }

        [WebMethod]
        public static string GetDriverTypeFromDriverId(string DriverId)
        {
            return objOP.RetrieveField2FromField1("DriverType", "Drivers", "DriverId", DriverId);
        }

        [WebMethod]
        public static string GetDriverWageTypeFromDriverId(string DriverId)
        {
            return objOP.RetrieveField2FromField1("WageType", "Drivers", "DriverId", DriverId);
        }

        [WebMethod]
        public static void CancelBooking(string BookingId, string OrderStatus)
        {
            EntityLayer.Booking objBooking = new EntityLayer.Booking();

            objBooking.BookingId = BookingId;
            objBooking.OrderStatus = OrderStatus;

            objDB.CancelBooking(objBooking);
        }


        [WebMethod]
        public static string GetCustomerNameByBooking(string BookingId)
        {
            return objDB.GetCustomerNameByBooking(BookingId);
        }

    }
}