using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

#region Required Global NameSpaces

using DataAccessLayer;
using EntityLayer;
using SecurityLayer;
using JobyCoWeb.Models;
using System.Data;
using System.Web.Services;

#endregion

namespace JobyCoWeb.Customers
{
    public partial class AddCustomer : System.Web.UI.Page
    {
        #region Required Global Classes

        static clsOperation objOP = new clsOperation();
        static clsDB objDB = new clsDB();
        static clsCryptography objCG = new clsCryptography();
        static ControlModels objCM = new ControlModels();

        #endregion

        protected void Page_Load(object sender, EventArgs e)
        {
            objCM.ResetMessageBar(lblErrMsg);

            if (!IsPostBack)
            {
                #region Menu Items & Page Controls

                objCM.PopulateAccessibleMenuItemsOnHiddenField(hfMenusAccessible);

                string sPagePath = objCM.GetCurrentPageName();
                int iMenuId = Convert.ToInt32(objOP.RetrieveField2FromAlikeField1("Menu_ID", "MenuDetails", "PagePath", sPagePath));
                objCM.PopulatePageControlsOnHiddenField(hfControlsAccessible, iMenuId);

                #endregion

                #region Checking SessionID

                BOLogin ObjLogin = new BOLogin();
                ObjLogin = (BOLogin)Session["Login"];

                if (ObjLogin == null)
                {
                    Response.Redirect("/Login.aspx");
                }
                else
                {
                    string sessionid = ObjLogin.SESSIONID;
                    if (sessionid == "")
                    {
                        Response.Redirect("/Login.aspx");
                    }
                    else
                    {
                        Master.LoggedInUser = objOP.GetUserName(ObjLogin.EMAILID.ToString());
                    }
                }

                #endregion

            }
        }

        public static EntityLayer.ItemValues[] GetDropDownValues(int iTableId, int iFieldId)
        {
            DataTable dtItemValues = objDB.GetDropDownValues(iTableId, iFieldId);
            List<EntityLayer.ItemValues> lstItemValues = new List<EntityLayer.ItemValues>();

            foreach (DataRow drCategories in dtItemValues.Rows)
            {
                EntityLayer.ItemValues iv = new EntityLayer.ItemValues();
                iv.ItemId = Convert.ToInt32(drCategories["ItemId"].ToString());
                iv.ItemValue = drCategories["ItemValue"].ToString();
                lstItemValues.Add(iv);
            }

            return lstItemValues.ToArray();
        }

        [WebMethod]
        public static EntityLayer.ItemValues[] GetAllOptions()
        {
            return GetDropDownValues(7, 10);
        }

        [WebMethod]
        public static string GetCustomerId()
        {
            //return objOP.GetAutoGeneratedValue("CustomerId", "Customers", "CUST", 9);
            //return objOP.GetAutoGeneratedValueClientFormat("CustomerId", "Customers", "CUST", 3);
            return objOP.GetAutoGeneratedValueClientFormatNew("CustomerId", "Customers", "CS", 5);
        }

        [WebMethod]
        public static string checkEmailID(string EmailID)
        {
            string sExists = "False";

            string sOutput = objOP.RetrieveField2FromField1("CustomerId", "Customers", "EmailID", EmailID);
            if(!sOutput.Trim().Equals(string.Empty))
            {
                sExists = "True";
            }

            return sExists;
        }

        [WebMethod]
        public static void AddCustomerDetails
            (
            string CustomerId,
            string EmailID,
            string Password,
            string Title,
            string FirstName,
            string LastName,
            string DOB,
            string Address,
            string LatitudePickup,
            string LongitudePickup,
            string Town,
            string Country,
            string PostCode,
            string Mobile,
            string Telephone,
            string HearAboutUs,
            string HavingRegisteredCompany,
            string Locked,
            string ShippingGoodsInCompanyName,
            string RegisteredCompanyName
            )
        {
            EntityLayer.Customer objCustomer = new EntityLayer.Customer();

            objCustomer.CustomerId = CustomerId;
            objCustomer.EmailID = EmailID;
            objCustomer.Password = objCG.getMd5Hash(Password);
            objCustomer.Title = Title;
            objCustomer.FirstName = FirstName;
            objCustomer.LastName = LastName;

            if (!string.IsNullOrEmpty(DOB))
            {
                objCustomer.DOB = Convert.ToDateTime(DOB,
                System.Globalization.CultureInfo.GetCultureInfo("hi-IN").DateTimeFormat);
            }

            objCustomer.Address = Address;
            objCustomer.LatitudePickup = Convert.ToDecimal(LatitudePickup);
            objCustomer.LongitudePickup = Convert.ToDecimal(LongitudePickup);
            objCustomer.Town = Town;
            objCustomer.Country = Country;
            objCustomer.PostCode = PostCode;
            objCustomer.Mobile = Mobile;
            objCustomer.Telephone = Telephone;
            objCustomer.HearAboutUs = HearAboutUs;
            objCustomer.HavingRegisteredCompany = Convert.ToBoolean(HavingRegisteredCompany);
            objCustomer.Locked = Convert.ToBoolean(Locked);
            objCustomer.ShippingGoodsInCompanyName = Convert.ToBoolean(ShippingGoodsInCompanyName);
            objCustomer.RegisteredCompanyName = RegisteredCompanyName;

            objDB.AddCustomer(objCustomer);
        }
    }
}